{"version":3,"sources":["webpack:///./src/components/dataRange.tsx","webpack:///./src/components/experiencCard.tsx","webpack:///./src/pages/experiences.tsx","webpack:///./src/components/technologyLabel.tsx"],"names":["DataRange","startDate","endDate","textColor","useColorModeValue","fontSize","pb","color","ExperiencCard","title","technologies","postions","colors","position","description","borderBottomWidth","borderBottomColor","py","fontWeight","map","align","justifyContent","flexDir","name","flexDirection","flexWrap","mt","technology","IndexPage","data","experiences","edges","node","key","id","childMarkdownRemark","frontmatter","positions","TechnologyLabel","alignItems","mb","bg","mr","p","rounded","w","h"],"mappings":"2FAAA,mFAOaA,EAAY,SAAC,GAGS,IAFjCC,EAEiC,EAFjCA,UACAC,EACiC,EADjCA,QAEMC,EAAYC,YAAkB,WAAY,YAEhD,OACE,kBAAC,IAAD,CAAMC,SAAS,KAAKC,GAAI,EAAGC,MAAOJ,GACjB,iBAAdF,GAAgCA,EADnC,KACgD,IAChC,iBAAZC,GAA8BA,GAAY,a,kLCIrCM,EAAgB,SAAC,GAIS,IAHrCC,EAGqC,EAHrCA,MACAC,EAEqC,EAFrCA,aACAC,EACqC,EADrCA,SAEMC,EAAS,CACbC,SAAUT,YAAkB,WAAY,YACxCU,YAAaV,YAAkB,WAAY,aAG7C,OACE,kBAAC,IAAD,CACEW,kBAAkB,MAClBC,kBAAmBZ,YAAkB,WAAY,YACjDa,GAAI,GAEJ,kBAAC,IAAD,CAAMZ,SAAS,KAAKE,MAAM,WAAWW,WAAW,OAAOZ,GAAI,GACxDG,GAGFE,aATH,EASGA,EAAUQ,KACT,SAACN,GAAD,OAME,oCACE,kBAAC,IAAD,CAAMO,MAAM,MAAMC,eAAe,gBAAgBC,QAAQ,UACvD,kBAAC,IAAD,CAAMjB,SAAS,KAAKE,MAAOK,EAAOC,SAAUK,WAAW,UACpDL,EAASU,MAEZ,kBAAC,IAAD,CACEtB,UAAWY,EAASZ,UACpBC,QAASW,aAAF,EAAEA,EAAUX,WAGvB,kBAAC,IAAD,CAAMG,SAAS,KAAKC,GAAI,EAAGC,MAAOK,EAAOE,aACtCD,EAASC,iBAMlB,kBAAC,IAAD,CAAMU,cAAc,MAAMC,SAAS,OAAOC,GAAI,GAC3ChB,EAAaS,KAAI,SAACQ,GAAD,OAChB,kBAAC,IAAoBA,S,YC3DhB,SAASC,EAAT,GAA+C,IAA1BC,EAA0B,EAA1BA,KAClC,OACE,kBAAC,IAAD,KACGA,EAAKC,YAAYC,MAAMZ,KAAI,gBAAGa,EAAH,EAAGA,KAAH,OAC1B,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVzB,MAAOuB,EAAKG,oBAAoBC,YAAY3B,MAC5CC,aAAcsB,EAAKG,oBAAoBC,YAAY1B,aACnDC,SAAUqB,EAAKG,oBAAoBC,YAAYC,kB,kCCfzD,2GAOaC,EAAkB,SAAC,GAAD,IAC7Bf,EAD6B,EAC7BA,KACAhB,EAF6B,EAE7BA,MAF6B,OAI7B,kBAAC,IAAD,CACEiB,cAAc,MACde,WAAW,SACXlC,SAAS,KACTE,MAAOH,YAAkB,WAAY,YACrCoC,GAAI,GAEJ,kBAAC,IAAD,CAAKC,GAAIlC,EAAOmC,GAAI,EAAGC,EAAG,EAAGC,QAAS,GAAIC,EAAE,OAAOC,EAAE,SACrD,kBAAC,IAAD,CAAMJ,GAAI,GAAInB","file":"component---src-pages-experiences-tsx-a5a36e09521e23f8eabf.js","sourcesContent":["import { Text, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface DataRangeProps {\n  startDate: string;\n  endDate: string;\n}\nexport const DataRange = ({\n  startDate,\n  endDate,\n}: DataRangeProps): JSX.Element => {\n  const textColor = useColorModeValue('gray.600', 'gray.500');\n\n  return (\n    <Text fontSize=\"xs\" pb={1} color={textColor}>\n      {startDate !== 'Invalid date' && startDate} -{' '}\n      {(endDate !== 'Invalid date' && endDate) || 'Present'}\n    </Text>\n  );\n};\n","import { Box, Flex, Text, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { DataRange } from './dataRange';\nimport { TechnologyLabel } from './technologyLabel';\n\ninterface ExperiencCardProps {\n  title: string;\n  technologies: {\n    color: string;\n    name: string;\n  }[];\n  postions: {\n    name: string;\n    startDate: string;\n    endDate: string;\n    description: string;\n  }[];\n}\n\nexport const ExperiencCard = ({\n  title,\n  technologies,\n  postions,\n}: ExperiencCardProps): JSX.Element => {\n  const colors = {\n    position: useColorModeValue('gray.500', 'gray.300'),\n    description: useColorModeValue('gray.600', 'gray.300'),\n  };\n\n  return (\n    <Box\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue('gray.200', 'gray.700')}\n      py={4}\n    >\n      <Text fontSize=\"xl\" color=\"blue.500\" fontWeight=\"bold\" pb={2}>\n        {title}\n      </Text>\n\n      {postions?.map(\n        (position: {\n          name: string;\n          startDate: string;\n          endDate: string;\n          description: string;\n        }) => (\n          <>\n            <Flex align=\"top\" justifyContent=\"space-between\" flexDir=\"column\">\n              <Text fontSize=\"md\" color={colors.position} fontWeight=\"bolder\">\n                {position.name}\n              </Text>\n              <DataRange\n                startDate={position.startDate}\n                endDate={position?.endDate}\n              />\n            </Flex>\n            <Text fontSize=\"xs\" pb={2} color={colors.description}>\n              {position.description}\n            </Text>\n          </>\n        ),\n      )}\n\n      <Flex flexDirection=\"row\" flexWrap=\"wrap\" mt={3}>\n        {technologies.map((technology: { color: string; name: string }) => (\n          <TechnologyLabel {...technology} />\n        ))}\n      </Flex>\n    </Box>\n  );\n};\n","import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport { ExperiencCard } from '../components/experiencCard';\nimport { Layout } from '../components/layout';\n\n// eslint-disable-next-line import/no-default-export\nexport default function IndexPage({ data }: any): JSX.Element {\n  return (\n    <Layout>\n      {data.experiences.edges.map(({ node }: any) => (\n        <ExperiencCard\n          key={node.id}\n          title={node.childMarkdownRemark.frontmatter.title}\n          technologies={node.childMarkdownRemark.frontmatter.technologies}\n          postions={node.childMarkdownRemark.frontmatter.positions}\n        />\n      ))}\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query {\n    experiences: allFile(\n      filter: {\n        internal: { mediaType: { eq: \"text/markdown\" } }\n        sourceInstanceName: { eq: \"experiences\" }\n      }\n      sort: {\n        fields: childMarkdownRemark___frontmatter___startDate\n        order: DESC\n      }\n    ) {\n      edges {\n        node {\n          childMarkdownRemark {\n            id\n            frontmatter {\n              title\n              startDate(formatString: \"DD MMMM, YYYY\")\n              technologies {\n                name\n                color\n              }\n              positions {\n                name\n                startDate(formatString: \"MMM YYYY\")\n                endDate(formatString: \"MMM YYYY\")\n                description\n              }\n            }\n            excerpt\n          }\n        }\n      }\n    }\n  }\n`;\n","import { Box, Flex, Text, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface TechnologyLabelProps {\n  name: string;\n  color: string;\n}\nexport const TechnologyLabel = ({\n  name,\n  color,\n}: TechnologyLabelProps): JSX.Element => (\n  <Flex\n    flexDirection=\"row\"\n    alignItems=\"center\"\n    fontSize=\"xs\"\n    color={useColorModeValue('gray.600', 'gray.400')}\n    mb={1}\n  >\n    <Box bg={color} mr={1} p={1} rounded={10} w=\"14px\" h=\"14px\" />\n    <Text mr={4}>{name}</Text>\n  </Flex>\n);\n"],"sourceRoot":""}